name: Flutter CI/CD

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./flutter-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.2"
          channel: "stable"
          cache: true

      # Add a step to setup the correct Dart SDK version
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: "3.6.1"

      # Chrome 설치 및 설정
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1

      # 테스트용 .env 파일 생성 (모든 환경 변수 포함)
      - name: Create test .env file
        run: |
          echo "PROD_SUPABASE_URL=${{ secrets.PROD_SUPABASE_URL }}" > .env
          echo "PROD_SUPABASE_ANON_KEY=${{ secrets.PROD_SUPABASE_ANON_KEY }}" >> .env
          echo "TEST_SUPABASE_URL=${{ secrets.TEST_SUPABASE_URL }}" >> .env
          echo "TEST_SUPABASE_ANON_KEY=${{ secrets.TEST_SUPABASE_ANON_KEY }}" >> .env

      - name: Install dependencies
        run: flutter pub get
      
      # 웹 플랫폼 활성화
      - name: Enable web platform
        run: flutter config --enable-web
        
      # Supabase 설정 일관성 테스트를 test 폴더로 복사 (integration_test -> test)
      - name: Copy Supabase test to regular test
        run: |
          mkdir -p test/supabase
          sed 's/import .*integration_test\/integration_test.dart.*;/import '\''package:flutter_test\/flutter_test.dart'\'';/' integration_test/supabase_config_consistency_test.dart > test/supabase/supabase_config_test.dart
          sed -i 's/IntegrationTestWidgetsFlutterBinding.ensureInitialized(); \/\/ Integration test 바인딩 초기화/TestWidgetsFlutterBinding.ensureInitialized(); \/\/ 테스트 바인딩 초기화/' test/supabase/supabase_config_test.dart
          sed -i 's/testWidgets/test/g' test/supabase/supabase_config_test.dart
        
      # 일반 테스트로 변환한 Supabase 설정 일관성 테스트 실행
      - name: Run Supabase Configuration Consistency Test
        run: flutter test test/supabase/supabase_config_test.dart
        
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze project source
        run: flutter analyze

      - name: Run tests
        run: flutter test

      # 릴리스 빌드용 .env 파일 생성 (프로덕션 키만 포함)
      - name: Create production .env file for build
        run: |
          echo "PROD_SUPABASE_URL=${{ secrets.PROD_SUPABASE_URL }}" > .env
          echo "PROD_SUPABASE_ANON_KEY=${{ secrets.PROD_SUPABASE_ANON_KEY }}" >> .env

      - name: Build APK
        run: flutter build apk --release

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk

  build_ios:
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    defaults:
      run:
        working-directory: ./flutter-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.2"
          channel: "stable"
          cache: true

      # Add a step to setup the correct Dart SDK version
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1
        with:
          sdk: "3.6.1"

      - name: Install dependencies
        run: flutter pub get

      # iOS 빌드용 .env 파일 (프로덕션 키만 포함)
      - name: Create production .env file for build
        run: |
          echo "PROD_SUPABASE_URL=${{ secrets.PROD_SUPABASE_URL }}" > .env
          echo "PROD_SUPABASE_ANON_KEY=${{ secrets.PROD_SUPABASE_ANON_KEY }}" >> .env

      - name: Build iOS
        run: flutter build ios --release --no-codesign

      - name: Upload iOS build
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios/iphoneos